the basics
----------
    -   the index.html file is served by the ng-server. and the app scripts are loaded by angular.
        Angular creates all neeeded JS bundles and imports them in the index.html file.

    -   when creating an angular app for the first time, the CLI creates and assigns an app-root
        that will contain all our components. Moreover, when looking at the @Component decorator,
        the selector key points exactly at this <app-root> component. The @Component decorator 
        holds all configuration needed by angular to render the component.

    -   the first code executed is the one present in the main.ts file. This code checks our current
        environmnet and then bootstraps and runs our angular application. 

        platformBrowserDynamic()
            .bootstrapModule(AppModule)
            .catch(err => console.error(err));
 
        As seen we call a platformBrowserDynamic().bootstrapModule(AppModule) that consumes our main 
        app module.

    -   The app.component.ts holds the configuration for the app module. 

            @NgModule({
                declarations: [
                    AppComponent
                ],
                imports: [
                    BrowserModule,
                    // AppRoutingModule,
                    // here we tell angular we want to import form features and inject them 
                    // into the app component  
                    // FormsModule
                ],
                providers: [],
                bootstrap: [
                    AppComponent
                ]
            })
            export class AppModule { }

            This holds a @NgModule decorator that declares the component, its imports, and has a 
        bootstrap key that holds all components angular should have present when analyzing the 
        index.html file. Angular gets started, it bootstraps an angular application by reading the 
        configuration on @NgModule, especially the boostrap array in the entry file, then 
        the app module gets started and components at the index.html file get rendered at runtime.
            The app component is special, it tells angular that it should bootstrap the whole 
        application, using it as the root. 

    Components.
            Components are key to angular. the whole application is built upon the components 
        we create. App component is the root of our project, we later nest all app components in 
        its index.html file. Each component has its own template, its own code and its own business 
        logic

        -   Components are regular TS classes that use a @Component decorator that tell typescript
            the class represents a Component. The Component decorator is exported from @angular/core.
            A library that holds angular core functionalities.

                The @Component decorator holds a configuration object holding some metadata that 
            tells angular what to do with it. A configuration object would look like:

                {
                    // html tag that this component will get rendered into, just like the app 
                    // component has an app root tag associated, other components might have
                    // their own unique selectors that ensure they don't overwrite each other.
                    // using this <app-server> html tag, other components can render this one
                    // into their own html templates.
                    // type: string.
                    selector: "app-server", 


                    // the template is a html file that holds all content that will be rendered 
                    // into app-server component 
                    templateUrl:'./server.component.ts'
                }

                export class ServerComponent{}
            
                If we want to use the ServerComponent component we must change the AppModule module 
            first.

    Modules.
            


    